buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("com.guardsquare:proguard-gradle:${project.proguard_version}") {
            exclude(group: "com.android.tools.build")
        }
    }
}

plugins {
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'dev.architectury.loom' version '0.11.0-SNAPSHOT'
}

version = project.mod_version
group = project.maven_group

loom {
    forge {
        mixinConfigs = [
                "noindium.mixins.json"
        ]
    }
}

repositories {
    repositories {
        maven {
            name = "Curse Maven"
            url = "https://cursemaven.com"
            content {
                includeGroup "curse.maven"
            }
        }
    }
    maven { url "https://maven.shedaniel.me/" }
    maven { url "https://jitpack.io" }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    forge "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    //modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    modImplementation "curse.maven:forgedfabric-api-662687:3945557"
}

processResources {
    inputs.property "version", project.version
    filteringCharset "UTF-8"

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

shadowJar {
    archiveClassifier.set("shadowed")
    configurations = [project.configurations.shadow]
}

//noinspection UnnecessaryQualifiedReference
task proguardJar(type: proguard.gradle.ProGuardTask, dependsOn: shadowJar) {

    Map<String, String> MODULE_INFO_CLASS_FILTER = new HashMap<String, String>(1) {{ put("filter", "!module-info.class") }}

    // NOTE: The "code/allocation/variable" optimisation (see: https://www.guardsquare.com/manual/configuration/optimizations) breaks remapJar.
    configuration("proguard-rules.pro")

    libraryjars(
            new HashMap<String, String>(2) {{
                putAll(MODULE_INFO_CLASS_FILTER)
                put("jarfilter", "!**.jar")
            }},
            fileTree("${System.getenv("JAVA_HOME")}/jmods").matching { include("java.base.jmod") }.getSingleFile()
    )
    libraryjars(MODULE_INFO_CLASS_FILTER, project.configurations.runtimeClasspath )

    File shadowedJar = shadowJar.archiveFile.get().asFile
    injars(shadowedJar)
    outjars("${buildDir}/tmp/${shadowedJar.getName()}")
}

prepareRemapJar {
    dependsOn(proguardJar)
}

remapJar {
    inputFile.set(proguardJar.outJarFileCollection.singleFile)
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            // add all the jars that should be included when publishing to maven
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
    }
}